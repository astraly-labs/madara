#!/bin/bash

declare -x FRAME
declare -x FRAME_INTERVAL

set_spinner() {
  FRAME=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
  FRAME_INTERVAL=0.1
}

start() {
  local step=0

  tput civis -- invisible

  while [ "$step" -lt "${#CMDS[@]}" ]; do
    ${CMDS[$step]} & pid=$!

    while ps -p $pid &>/dev/null; do
      echo -ne "\\r[   ] ${STEPS[$step]} ..."

      for k in "${!FRAME[@]}"; do
        echo -ne "\\r[ ${FRAME[k]} ] ${STEPS[$step]} ..."
        sleep $FRAME_INTERVAL
      done
    done

    echo -ne "\\r[ ✔ ] ${STEPS[$step]}\\n"
    step=$((step + 1))
  done

  tput cnorm -- normal
}

# Detect OS
OS="$(uname -s)"
case "$OS" in
  Linux*)     OS=Linux;;
  Darwin*)    OS=Mac;;
  *)          echo "Unsupported OS: $OS"; exit 1;;
esac

# Colors and styles
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
CYAN=$(tput setaf 6)
NC=$(tput sgr0) # No Color
BOLD=$(tput bold)
UNDERLINE=$(tput smul)
BLINK=$(tput blink)

# Icons for social links
GITHUB_ICON="🔗 GitHub: "
DOCS_ICON="📄 Documentation: "

# Function for progress bar
progress_bar() {
    local duration=${1}
    already_done() { for ((done=0; done<$elapsed; done++)); do printf "▇"; done }
    remaining() { for ((remain=$elapsed; remain<$duration; remain++)); do printf " "; done }
    percentage() { printf "| %s%%" $(( ($elapsed * 100) / $duration )); }

    for ((elapsed=1; elapsed<=$duration; elapsed++))
    do
        printf "\r["
        already_done; remaining; percentage
        sleep 0.1
    done
    printf "]\n"
}

# ASCII Art
ascii_art() {
echo -e "${RED}
                    __  ___          __                
                   /  |/  /___ _____/ /___ __________ _
                  / /|_/ / __ \`/ __  / __ \`/ ___/ __ \`/
                 / /  / / /_/ / /_/ / /_/ / /  / /_/ / 
                /_/  /_/\__,_/\__,_/\__,_/_/   \__,_/  
                                       ${NC}v0.7.0-alpha
"
}

# Preset Chain Config URLs
declare -A PRESET_URLS
PRESET_URLS["starknet_mainnet"]="https://raw.githubusercontent.com/madara-alliance/madara/main/configs/presets/mainnet.yaml"
PRESET_URLS["starknet_testnet"]="https://raw.githubusercontent.com/madara-alliance/madara/main/configs/presets/testnet.yaml"
PRESET_URLS["test"]="https://raw.githubusercontent.com/madara-alliance/madara/main/configs/presets/test.yaml"
PRESET_URLS["devnet"]="https://raw.githubusercontent.com/madara-alliance/madara/main/configs/presets/devnet.yaml"

# Welcome message
clear
ascii_art
echo -e "${GREEN}${BOLD}Welcome to the Madara Launcher!${NC}"
echo -e "${GREEN}This script allows you to easily launch a Madara instance using Docker with your desired parameters.${NC}"
echo -e "${GREEN}For more information, please refer to our documentation:${NC}"
echo -e "${CYAN}${DOCS_ICON}${UNDERLINE}https://docs.madara.build${NC}"
# Save cursor position
tput sc

# Check for dependencies
echo -e "\n${GREEN}We will now proceed to a dependency check${NC}"

echo -e "\n${YELLOW}${BOLD}Would you like to proceed? (yes/no)${NC}"
read -p "> " PROCEED

tput rc
tput ed

if [ "$PROCEED" != "yes" ]; then
    echo -e "${RED}Operation aborted.${NC}"
    exit 1
fi

# Define dependencies and their check commands (excluding Docker)
DEPENDENCIES=(
    "curl:command -v curl"
    "git:command -v git"
    "yq:command -v yq"
)

# Function to check for a dependency
check_dependency() {
    eval "$1" >/dev/null 2>&1
}

# Function to check if Docker is installed
check_docker_installed() {
    if ! command -v docker >/dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}

# Function to check if Docker daemon is running
check_docker_running() {
    if ! docker info >/dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}

# Check dependencies
MISSING_DEPS=()
for DEP in "${DEPENDENCIES[@]}"; do
    DEP_NAME="${DEP%%:*}"
    DEP_CHECK="${DEP##*:}"
    if ! check_dependency "$DEP_CHECK"; then
        MISSING_DEPS+=("$DEP_NAME")
    fi
done

# Check for Docker
DOCKER_MISSING=false
DOCKER_NOT_RUNNING=false

if ! check_docker_installed; then
    DOCKER_MISSING=true
elif ! check_docker_running; then
    DOCKER_NOT_RUNNING=true
fi

# Report missing dependencies
if [ ${#MISSING_DEPS[@]} -ne 0 ] || [ "$DOCKER_MISSING" = true ]; then
    echo -e "${YELLOW}\nThe following dependencies are missing or not running:${NC}"
    for DEP in "${MISSING_DEPS[@]}"; do
        echo -e "${YELLOW}- $DEP${NC}"
    done
    if [ "$DOCKER_MISSING" = true ]; then
        echo -e "${YELLOW}- Docker${NC}"
    fi

    echo -e "\n${YELLOW}${BOLD}Do you want to install the missing dependencies? (yes/no)${NC}"
    read -p "> " INSTALL_DEPS

    if [ "$INSTALL_DEPS" != "yes" ]; then
        echo -e "\n${RED}Installation aborted.${NC}"
        exit 1
    else
        echo -e "\n${GREEN}Installing missing dependencies...${NC}"
        if [ "$OS" == "Linux" ]; then
            sudo apt update
            for DEP in "${MISSING_DEPS[@]}"; do
                if [ "$DEP" == "yq" ]; then
                    echo -e "${GREEN}Installing yq...${NC}"
                    sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
                    sudo chmod +x /usr/local/bin/yq
                    continue
                fi
                if ! sudo apt install -y "$DEP"; then
                    echo -e "${RED}Failed to install $DEP.${NC}"
                fi
            done
            if [ "$DOCKER_MISSING" = true ]; then
                echo -e "${GREEN}Installing Docker...${NC}"
                curl -fsSL https://get.docker.com -o get-docker.sh
                sudo sh get-docker.sh
                rm get-docker.sh
                sudo usermod -aG docker $USER
                newgrp docker
                sudo systemctl start docker
            fi
        elif [ "$OS" == "Mac" ]; then
            for DEP in "${MISSING_DEPS[@]}"; do
                if [ "$DEP" == "yq" ]; then
                    echo -e "${GREEN}Installing yq via Homebrew...${NC}"
                    if ! brew install yq; then
                        echo -e "${RED}Failed to install yq.${NC}"
                    fi
                    continue
                fi
                if ! brew install "$DEP"; then
                    echo -e "${RED}Failed to install $DEP.${NC}"
                fi
            done
            if [ "$DOCKER_MISSING" = true ]; then
                echo -e "${GREEN}Installing Docker via Homebrew...${NC}"
                if ! brew install --cask docker; then
                    echo -e "${RED}Failed to install Docker.${NC}"
                else
                    echo -e "${GREEN}Docker installed.\nTrying to open /Applications/Docker.app to start the Docker daemon.${NC}"
                    open /Applications/Docker.app
                    # Wait for Docker daemon to start
                    echo -e "${GREEN}Waiting for Docker daemon to start...${NC}"
                    while ! docker info >/dev/null 2>&1; do
                        sleep 1
                    done
                    echo -e "${GREEN}Docker daemon is running.${NC}"
                fi
            fi
        fi
    fi
fi

# Check if Docker daemon is running
if [ "$DOCKER_NOT_RUNNING" = true ]; then
    echo -e "\n${YELLOW}Docker is installed but not running.${NC}"
    if [ "$OS" == "Linux" ]; then
        echo -e "${GREEN}Starting Docker daemon...${NC}"
        sudo systemctl start docker
        if ! sudo systemctl is-active --quiet docker; then
            echo -e "${RED}Failed to start Docker daemon.${NC}"
            exit 1
        else
            echo -e "${GREEN}Docker daemon is running.${NC}"
        fi
    elif [ "$OS" == "Mac" ]; then
        echo -e "${GREEN}Trying to open /Applications/Docker.app to start the Docker daemon.${NC}"
        open /Applications/Docker.app
        # Wait for Docker daemon to start
        echo -e "${GREEN}Waiting for Docker daemon to start...${NC}"
        while ! docker info >/dev/null 2>&1; do
            sleep 1
        done
        echo -e "${GREEN}Docker daemon is running.${NC}"
    fi
fi

# Re-check dependencies to ensure all are installed and running
echo -e "\n${GREEN}Verifying installation of dependencies...${NC}"
RECHECK_MISSING_DEPS=()
for DEP in "${DEPENDENCIES[@]}"; do
    DEP_NAME="${DEP%%:*}"
    DEP_CHECK="${DEP##*:}"
    if ! check_dependency "$DEP_CHECK"; then
        RECHECK_MISSING_DEPS+=("$DEP_NAME")
    fi
done

# Re-check Docker
if ! check_docker_installed; then
    RECHECK_MISSING_DEPS+=("Docker")
elif ! check_docker_running; then
    RECHECK_MISSING_DEPS+=("Docker daemon not running")
fi

if [ ${#RECHECK_MISSING_DEPS[@]} -ne 0 ]; then
    echo -e "\n${RED}The following dependencies could not be installed or are not running:${NC}"
    for DEP in "${RECHECK_MISSING_DEPS[@]}"; do
        echo -e "${RED}- $DEP${NC}"
    done
    exit 1
else
    echo -e "\n${GREEN}All dependencies are successfully installed and verified.${NC}"
fi

# Choose the mode
echo -e "\n🕹️ ${YELLOW}${BOLD}On which mode would you like to run Madara? (Enter a number)${NC}\n"
echo "${YELLOW}1. Full Node${NC}"
echo "${YELLOW}2. Sequencer${NC}"
echo "${YELLOW}3. Devnet${NC}"
while true; do
    read -p "> " MODE_CHOICE
    case $MODE_CHOICE in
        1) MODE="full"; break ;;
        2) MODE="sequencer"; break ;;
        3) MODE="devnet"; break ;;
        *) echo -e "${YELLOW}Invalid choice, please enter 1, 2, or 3.${NC}" ;;
    esac
done

tput rc
tput ed

echo -e "\n${GREEN}Madara will run in ${BOLD}${MODE}${NC}${GREEN} mode.${NC}"

# Ask for the node name
while true; do
    echo -e "\n${YELLOW}${BOLD}👤 What name would you like to give this node?${NC}"
    read -p "> " NODE_NAME
    if [ -n "$NODE_NAME" ]; then
        break
    else
        echo -e "${RED}Node name cannot be empty.${NC}"
    fi
done

tput rc
tput ed

echo -e "\n${GREEN}Your node has been correctly named: ${BOLD}${NODE_NAME}${NC}${GREEN}.${NC}"

# Ask for the database path
echo -e "\n💾 ${YELLOW}${BOLD}Where would you like to store your database? (default: /tmp/madara)${NC}"
read -p "> " BASE_PATH
BASE_PATH=${BASE_PATH:-/tmp/madara}

tput rc
tput ed

# Create the base path directory if it doesn't exist
if [ ! -d "$BASE_PATH" ]; then
    mkdir -p "$BASE_PATH"
fi

# Modify Chain Config Function
modify_chain_config() {
    local config_file="$1"
    local OVERRIDES_FILE="$BASE_PATH/overrides.txt"
    > "$OVERRIDES_FILE"  # Empty the overrides file

    # Read all leaf nodes with their paths and values
    config_entries=()
    while IFS= read -r line; do
        config_entries+=("$line")
    done < <(yq eval '.. | select(tag != "!!map" and tag != "!!seq") | [path | join("."), .] | @tsv' "$config_file")

    tput rc
    tput ed

    # Display all parameters with improved formatting
    echo -e "\n${YELLOW}${BOLD}Here are all the parameters of your chosen configuration:${NC}\n"

    prev_prefix=""
    for i in "${!config_entries[@]}"; do
        entry="${config_entries[$i]}"
        path=$(echo "$entry" | cut -f1)
        value=$(echo "$entry" | cut -f2-)

        # Extract the top-level prefix for grouping
        prefix=$(echo "$path" | cut -d'.' -f1)

        # Add a new line and header when a new group starts
        if [[ "$prefix" != "$prev_prefix" ]]; then
            echo -e "${BLUE}${BOLD}$prefix:${NC}"
            prev_prefix="$prefix"
        fi

        # Indent sub-parameters
        sub_path=$(echo "$path" | cut -d'.' -f2-)
        if [[ -n "$sub_path" ]]; then
            display_path="  - ${sub_path}"
        else
            display_path="  - $prefix"
        fi

        echo -e "${YELLOW}$((i+1)). ${display_path} = ${value}${NC}"
    done

    # Ask user which parameters to modify
    echo -e "\n${YELLOW}Enter the numbers of the parameters you wish to modify, separated by spaces (e.g., 1 3 5).${NC}"
    echo -e "${YELLOW}Press Enter to continue without modifying any parameters.${NC}"
    read -p "> " MODIFY_NUMBERS

    # Check if the user wants to skip modifications
    if [[ -z "$MODIFY_NUMBERS" ]]; then
        echo -e "${GREEN}No parameters selected for modification. Proceeding with the original configuration.${NC}"
    else
        selected_indices=($MODIFY_NUMBERS)

        for index in "${selected_indices[@]}"; do
            # Subtract 1 to convert to zero-based index
            idx=$((index - 1))
            if [ "$idx" -ge 0 ] && [ "$idx" -lt "${#config_entries[@]}" ]; then
                entry="${config_entries[$idx]}"
                path=$(echo "$entry" | cut -f1)
                value=$(echo "$entry" | cut -f2-)
                echo -e "\n${YELLOW}Parameter: ${path}${NC}"
                echo -e "${GREEN}Current value: ${value}${NC}"
                echo -e "${YELLOW}Enter new value for ${path}:${NC}"
                read -p "> " NEW_VALUE
                echo "${path}=${NEW_VALUE}" >> "$OVERRIDES_FILE"
            else
                echo -e "${RED}Invalid selection: $index${NC}"
            fi
        done
    fi

    # Apply the overrides to the original config file and write to $BASE_PATH/chain_config.yaml
    MODIFIED_CONFIG_PATH="$BASE_PATH/chain_config.yaml"
    cp "$config_file" "$MODIFIED_CONFIG_PATH"

    if [[ -s "$OVERRIDES_FILE" ]]; then
        while IFS= read -r line; do
            key=$(echo "$line" | cut -d'=' -f1)
            val=$(echo "$line" | cut -d'=' -f2-)
            yq eval -i ".${key} = \"${val}\"" "$MODIFIED_CONFIG_PATH"
        done < "$OVERRIDES_FILE"
    fi

    # Set CHAIN_CONFIG_FILE to the path of the modified chain config
    CHAIN_CONFIG_FILE="$MODIFIED_CONFIG_PATH"
}

# Choose the network based on the mode
if [ "$MODE" == "sequencer" ] || [ "$MODE" == "devnet" ]; then
    # For sequencer and devnet modes
    echo -e "\n🌐 ${YELLOW}${BOLD}Please choose one of the available presets or provide a custom chain config path: (Enter a number)${NC}\n"
    echo "${YELLOW}1. Starknet Mainnet${NC}"
    echo "${YELLOW}2. Starknet Testnet${NC}"
    echo "${YELLOW}3. Devnet${NC}"
    echo "${YELLOW}4. Custom Chain config${NC}"
    while true; do
        read -p "> " NETWORK_CHOICE
        case $NETWORK_CHOICE in
            1)
                PRESET="starknet_mainnet"
                PRESET_URL="${PRESET_URLS[$PRESET]}"
                ;;
            2)
                PRESET="starknet_testnet"
                PRESET_URL="${PRESET_URLS[$PRESET]}"
                ;;
            3)
                PRESET="devnet"
                PRESET_URL="${PRESET_URLS[$PRESET]}"
                ;;
            4)
                echo -e "\n${YELLOW}Please provide the path to your custom chain config:${NC}"
                read -p "> " CUSTOM_CHAIN_CONFIG
                if [ -f "$CUSTOM_CHAIN_CONFIG" ]; then
                    PRESET="custom"
                    PRESET_PATH="$CUSTOM_CHAIN_CONFIG"
                else
                    echo -e "${RED}File not found. Please provide a valid path.${NC}"
                    continue
                fi
                ;;
            *) echo -e "${YELLOW}Invalid choice, please enter 1, 2, 3, or 4.${NC}"; continue ;;
        esac

        # Now, if a preset was selected (options 1-3), download the chain config file
        if [ "$PRESET" != "custom" ]; then
            # Download the chain config file to a temporary location
            PRESET_PATH=$(mktemp)
            curl -s -o "$PRESET_PATH" "$PRESET_URL"
            if [ $? -ne 0 ] || [ ! -s "$PRESET_PATH" ]; then
                echo -e "${RED}Failed to download the chain config file from $PRESET_URL.${NC}"
                exit 1
            fi
        fi

        # Call modify_chain_config with the chain config file
        modify_chain_config "$PRESET_PATH"
        break
    done
else
    # For full node mode
    echo -e "\n🌐 ${YELLOW}${BOLD}Please choose a Network or provide a custom Chain config path: (Enter a number)${NC}\n"
    echo "${YELLOW}1. Starknet Mainnet${NC}"
    echo "${YELLOW}2. Starknet Testnet${NC}"
    echo "${YELLOW}3. Test${NC}"
    echo "${YELLOW}4. Custom Chain config${NC}"
    while true; do
        read -p "> " NETWORK_CHOICE
        case $NETWORK_CHOICE in
            1)
                NETWORK="main"
                PRESET="starknet_mainnet"
                PRESET_URL="${PRESET_URLS[$PRESET]}"
                ;;
            2)
                NETWORK="test"
                PRESET="starknet_testnet"
                PRESET_URL="${PRESET_URLS[$PRESET]}"
                ;;
            3)
                NETWORK="test"
                PRESET="test"
                PRESET_URL="${PRESET_URLS[$PRESET]}"
                ;;
            4)
                echo -e "\n${YELLOW}Please provide the path to your custom chain config:${NC}"
                read -p "> " CUSTOM_CHAIN_CONFIG
                if [ -f "$CUSTOM_CHAIN_CONFIG" ]; then
                    NETWORK="custom"
                    PRESET_PATH="$CUSTOM_CHAIN_CONFIG"
                else
                    echo -e "${RED}File not found. Please provide a valid path.${NC}"
                    continue
                fi
                ;;
            *) echo -e "${YELLOW}Invalid choice, please enter 1, 2, 3, or 4.${NC}"; continue ;;
        esac

        # For options 1-3, download the chain config file and call modify_chain_config
        if [ "$NETWORK" != "custom" ]; then
            PRESET_PATH=$(mktemp)
            curl -s -o "$PRESET_PATH" "$PRESET_URL"
            if [ $? -ne 0 ] || [ ! -s "$PRESET_PATH" ]; then
                echo -e "${RED}Failed to download the chain config file from $PRESET_URL.${NC}"
                exit 1
            fi
        fi

        # Call modify_chain_config with the chain config file
        modify_chain_config "$PRESET_PATH"
        break
    done
fi

tput rc
tput ed

echo -e "\n${GREEN}You have chosen to run your node under the preset or custom chain config.${NC}"

# Ask for RPC access
while true; do
    echo -e "\n🔌 ${YELLOW}${BOLD}Do you want to enable RPC access? (yes/no) ${NC}"
    read -p "> " RPC_ACCESS
    case $RPC_ACCESS in
        yes|no) break ;;
        *) echo -e "${YELLOW}Please answer yes or no.${NC}" ;;
    esac
done

tput rc
tput ed

if [ "$RPC_ACCESS" == "yes" ]; then
    RPC_OPTS="--rpc-cors '*' --rpc-external"
    echo -e "\n🚪 ${YELLOW}${BOLD}On which port do you want RPC access? (default: 9944)${NC}"
    
    while true; do
        read -p "> " RPC_PORT
        RPC_PORT=${RPC_PORT:-9944}

        # Check if the port is a valid number between 1 and 65535
        if ! [[ "$RPC_PORT" =~ ^[0-9]+$ ]] || [ "$RPC_PORT" -lt 1 ] || [ "$RPC_PORT" -gt 65535 ]; then
            echo -e "${RED}⚠️  Invalid port number. Please enter a valid port between 1 and 65535.${NC}"
            continue
        fi

        # Check if the port is already in use
        if lsof -i :"$RPC_PORT" &>/dev/null; then
            echo -e "${RED}⚠️  Port $RPC_PORT is already in use. Please choose another port.${NC}"
            continue
        fi

        break
    done

    RPC_OPTS="$RPC_OPTS --rpc-port $RPC_PORT"
    PORT_MAPPING="-p $RPC_PORT:$RPC_PORT"
else
    RPC_OPTS=""
    PORT_MAPPING=""
fi

tput rc
tput ed

# Ask for the L1 endpoint URL
while true; do
    echo -e "\n🔗 ${YELLOW}${BOLD}Provide an L1 RPC endpoint (URL format):${NC}"
    read -p "> " L1_ENDPOINT
    if [[ $L1_ENDPOINT =~ ^https?:// ]]; then
        break
    else
        echo -e "${RED}Please enter a valid URL starting with http:// or https://.${NC}"
    fi
done

tput rc
tput ed

# Check if the image is available locally
IMAGE_NAME="ghcr.io/madara-alliance/madara/madara:latest"
if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "$IMAGE_NAME"; then
    echo -e "\n📦 ${GREEN}Docker image '$IMAGE_NAME' is already available locally.${NC}"
else
    echo -e "\n🚢 ${YELLOW}${BOLD}Docker image not found locally. Pulling from GitHub Packages...${NC}"
    docker pull $IMAGE_NAME
fi

# Build the final Docker run command
DOCKER_COMMAND="docker run -d --name madara-client \
    -v ${BASE_PATH}:/data \
    ${PORT_MAPPING} \
    $IMAGE_NAME \
    --${MODE} --name \"${NODE_NAME}\" --chain-config=\"/data/chain_config.yaml\" --base-path=\"/data\" ${RPC_OPTS} --l1-endpoint \"${L1_ENDPOINT}\""

echo -e "\n🔄 ${YELLOW}${BOLD}The following Docker command will be executed:${NC}\n"
echo -e "${CYAN}$DOCKER_COMMAND${NC}"

# Confirm before executing
echo -e "\n${YELLOW}${BOLD}Do you want to proceed? (yes/no)${NC}\n"
read -p "> " CONFIRM
if [ "$CONFIRM" == "yes" ]; then
    echo -e "\n${GREEN}Starting the Madara node via Docker...${NC}"
    # Stop and remove any existing container with the same name
    if docker ps -a --format '{{.Names}}' | grep -Eq "^madara-client\$"; then
        echo -e "\n${YELLOW}A container named 'madara-client' already exists. Stopping and removing it...${NC}"
        docker stop madara-client
        docker rm madara-client
    fi
    eval $DOCKER_COMMAND
    tput rc
    tput ed
    # Check if the Madara Docker container is running
    if docker ps --format '{{.Names}}' | grep -q '^madara-client$'; then
        echo -e "\n${GREEN}Madara client is running.${NC}"
        echo -e "${YELLOW}Container details:${NC}"
        docker inspect madara-client --format '
        Name: {{.Name}}
        ID: {{.Id}}
        Image: {{.Config.Image}}
        Status: {{.State.Status}}
        StartedAt: {{.State.StartedAt}}
        Ports: {{range $p, $conf := .NetworkSettings.Ports}}{{$p}}: {{(index $conf 0).HostPort}}{{end}}'
        
        echo -e "\n${YELLOW}Client Logs (last 10 lines):${NC}"
        docker logs --tail 10 madara-client
        
        # Ask the user whether to quit or display more logs
        echo -e "\n${YELLOW}${BOLD}Would you like to display the full logs of the running instance or quit? (logs/quit)${NC}\n"
        read -p "> " USER_CHOICE
        if [ "$USER_CHOICE" == "logs" ]; then
            echo -e "\n${YELLOW}Displaying full logs...${NC}"
            docker logs -f madara-client
        else
            echo -e "\n${GREEN}Exiting...${NC}"
        fi
    else
        echo -e "${RED}Madara client is not running.${NC}"
    fi
else
    echo -e "${RED}Command execution aborted.${NC}"
fi